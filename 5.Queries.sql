-- Promotion Effectiveness: Evaluates how effective active promotions are in terms of customers, orders, and revenue.

-- OLTP DB
SELECT
    p.Code AS PromotionCode,
    COUNT(DISTINCT o.UserID) AS TotalCustomers,
    COUNT(o.OrderID) AS TotalOrders,
    SUM(o.TotalAmount) AS TotalRevenue,
    SUM(o.TotalAmount * (p.DiscountPercent / 100)) AS TotalDiscount,
    CASE
        WHEN p.IsActive THEN 'Active'
        ELSE 'Inactive'
        END AS PromotionStatus
FROM Orders o
         JOIN Promotions p ON o.PromotionID = p.PromotionID
GROUP BY p.Code, p.IsActive;


-- OLAP DB
SELECT
    dp.PromotionName AS PromotionCode,
    fpe.TotalCustomers,
    fpe.TotalOrders,
    fpe.TotalRevenue,
    fpe.TotalDiscount,
    CASE
        WHEN dp.IsActive THEN 'Active'
        ELSE 'Inactive'
        END AS PromotionStatus
FROM FactPromotionEffectiveness fpe
         JOIN DimPromotion dp ON fpe.PromotionKey = dp.PromotionKey;



--What is the total revenue generated by each payment method?

-- OLTP DB
SELECT pm.PaymentMethodName, SUM(o.TotalAmount) AS TotalRevenue
FROM Orders o
         JOIN PaymentMethods pm ON o.PaymentMethodID = pm.PaymentMethodID
GROUP BY pm.PaymentMethodName
ORDER BY TotalRevenue DESC;

-- OLAP DB
SELECT dpm.PaymentMethodName, SUM(fs.TotalRevenue) AS TotalRevenue
FROM FactSales fs
         JOIN DimPaymentMethod dpm ON fs.PaymentMethodKey = dpm.PaymentMethodKey
GROUP BY dpm.PaymentMethodName
ORDER BY TotalRevenue DESC;


-- What is the total revenue and number of orders per user?

-- OLTP DB
SELECT
    u.Email AS UserEmail,
    CONCAT(u.FirstName, ' ', u.LastName) AS CustomerName,
    COUNT(o.OrderID) AS TotalOrders,
    SUM(o.TotalAmount) AS TotalRevenue
FROM Orders o
         JOIN Users u ON o.UserID = u.UserID
GROUP BY u.Email, u.FirstName, u.LastName;

-- OLAP DB
SELECT
    dc.Email AS UserEmail,
    dc.CustomerFullName AS CustomerName,
    COUNT(fs.OrderID) AS TotalOrders,
    SUM(fs.TotalRevenue) AS TotalRevenue
FROM FactSales fs
         JOIN DimCustomer dc ON fs.CustomerKey = dc.CustomerKey
GROUP BY dc.Email, dc.CustomerFullName;


-- What is the average discount applied per promotion across all orders?

-- OLTP DB
SELECT
    p.Code AS PromotionCode,
    ROUND(AVG(o.TotalAmount * (p.DiscountPercent / 100)), 2) AS AvgDiscount
FROM Orders o
         JOIN Promotions p ON o.PromotionID = p.PromotionID
WHERE o.PromotionID IS NOT NULL
GROUP BY p.Code
ORDER BY AvgDiscount DESC;

-- OLAP DB
SELECT
    dp.PromotionName AS PromotionCode,
    ROUND(AVG(fpe.TotalDiscount / NULLIF(fpe.TotalOrders, 0)), 2) AS AvgDiscount
FROM FactPromotionEffectiveness fpe
         JOIN DimPromotion dp ON fpe.PromotionKey = dp.PromotionKey
GROUP BY dp.PromotionName
ORDER BY AvgDiscount DESC;









